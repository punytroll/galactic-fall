<?xml version="1.0" encoding="utf-8"?>
<template>
	<header name="Event" description="An event class." author="Hagen MÃ¶bius">
		<uuid>1b679b70-2a62-11de-8c30-0800200c9a66</uuid>
		<label category="c++"/>
		<label category="class"/>
		<variable type="boolean" name="Assertions" default-value="true" description="Specify whether your generated code should contain assertions."/>
		<variable type="boolean" name="InstanceCount" default-value="true" description="Specify whether your generated code should include debug messages on creation and destruction."/>
		<variable type="integer" name="NumberOfArguments" default-value="0" description="The number of typed arguments."/>
	</header>
	<body>/////////  begin  <variable>Template.UUID</variable>  ///////////////////////
// <variable>Template.Name</variable>
// Assertions=<to-string><variable>Assertions</variable></to-string>
// InstanceCount=<to-string><variable>InstanceCount</variable></to-string>
// NumberOfArguments=<to-string><variable>NumberOfArguments</variable></to-string>
///////////////////////////////////////////////////////////////////////////////
template &lt; typename ReturnType<foreach name="Loop"><over><range><to-integer>1</to-integer><variable>NumberOfArguments</variable></range></over><do>, typename Argument<to-string><variable>Loop</variable></to-string>Type</do></foreach> &gt;
class Event<to-string><variable>NumberOfArguments</variable></to-string>
{
public:
	class CallbackIterator
	{
	public:
		CallbackIterator(Node&lt; std::function&lt; ReturnType (<if><condition><greater><variable>NumberOfArguments</variable><to-integer>0</to-integer></greater></condition><then><foreach name="Loop"><over><range><to-integer>1</to-integer><variable>NumberOfArguments</variable></range></over><do><if><condition><greater><variable>Loop</variable><to-integer>1</to-integer></greater></condition><then>, </then></if>Argument<to-string><variable>Loop</variable></to-string>Type</do></foreach></then><else>void</else></if>) &gt; &gt; * CallbackNode) :
			_CallbackNode(CallbackNode)
		{
		}
		
		CallbackIterator(const CallbackIterator &amp; CallbackIterator) :
			_CallbackNode(CallbackIterator._CallbackNode)
		{
		}
		
		CallbackIterator &amp; operator=(const CallbackIterator &amp; CallbackIterator)
		{
			_CallbackNode = CallbackIterator._CallbackNode;
			
			return *this;
		}
		
		CallbackIterator &amp; operator++(void)
		{
			_CallbackNode = _CallbackNode-&gt;GetNext();
			
			return *this;
		}
		
		bool IsValid(void) const
		{
			return _CallbackNode != 0;
		}
		
		ReturnType operator()(<if><condition><greater><variable>NumberOfArguments</variable><to-integer>0</to-integer></greater></condition><then><foreach name="Loop"><over><range><to-integer>1</to-integer><variable>NumberOfArguments</variable></range></over><do><if><condition><greater><variable>Loop</variable><to-integer>1</to-integer></greater></condition><then>, </then></if>Argument<to-string><variable>Loop</variable></to-string>Type Argument<to-string><variable>Loop</variable></to-string></do></foreach></then><else>void</else></if>)
		{
			return _CallbackNode-&gt;GetValue()(<foreach name="Loop"><over><range><to-integer>1</to-integer><variable>NumberOfArguments</variable></range></over><do><if><condition><greater><variable>Loop</variable><to-integer>1</to-integer></greater></condition><then>, </then></if>Argument<to-string><variable>Loop</variable></to-string></do></foreach>);
		}
	private:
		Node&lt; std::function&lt; ReturnType (<if><condition><greater><variable>NumberOfArguments</variable><to-integer>0</to-integer></greater></condition><then><foreach name="Loop"><over><range><to-integer>1</to-integer><variable>NumberOfArguments</variable></range></over><do><if><condition><greater><variable>Loop</variable><to-integer>1</to-integer></greater></condition><then>, </then></if>Argument<to-string><variable>Loop</variable></to-string>Type</do></foreach></then><else>void</else></if>) &gt; &gt; * _CallbackNode;
	};
	
	ConnectionHandle Connect(std::function&lt; ReturnType (<if><condition><greater><variable>NumberOfArguments</variable><to-integer>0</to-integer></greater></condition><then><foreach name="Loop"><over><range><to-integer>1</to-integer><variable>NumberOfArguments</variable></range></over><do><if><condition><greater><variable>Loop</variable><to-integer>1</to-integer></greater></condition><then>, </then></if>Argument<to-string><variable>Loop</variable></to-string>Type</do></foreach></then><else>void</else></if>) &gt; Callback)
	{
		return ConnectionHandle(_Callbacks.Append(Callback));
	}
	
	void Disconnect(ConnectionHandle &amp; ConnectionHandle)
	{
		_Callbacks.Remove(static_cast&lt; Node&lt; std::function&lt; ReturnType (<if><condition><greater><variable>NumberOfArguments</variable><to-integer>0</to-integer></greater></condition><then><foreach name="Loop"><over><range><to-integer>1</to-integer><variable>NumberOfArguments</variable></range></over><do><if><condition><greater><variable>Loop</variable><to-integer>1</to-integer></greater></condition><then>, </then></if>Argument<to-string><variable>Loop</variable></to-string>Type</do></foreach></then><else>void</else></if>) &gt; &gt; * &gt;(ConnectionHandle.GetHandle()));
		ConnectionHandle.Invalidate();
	}
	
	CallbackIterator GetCallbackIterator(void)
	{
		return CallbackIterator(_Callbacks.GetHead());
	}
	
	void operator()(<if><condition><greater><variable>NumberOfArguments</variable><to-integer>0</to-integer></greater></condition><then><foreach name="Loop"><over><range><to-integer>1</to-integer><variable>NumberOfArguments</variable></range></over><do><if><condition><greater><variable>Loop</variable><to-integer>1</to-integer></greater></condition><then>, </then></if>Argument<to-string><variable>Loop</variable></to-string>Type Argument<to-string><variable>Loop</variable></to-string></do></foreach></then><else>void</else></if>)
	{
		std::list&lt; std::function&lt; ReturnType (<if><condition><greater><variable>NumberOfArguments</variable><to-integer>0</to-integer></greater></condition><then><foreach name="Loop"><over><range><to-integer>1</to-integer><variable>NumberOfArguments</variable></range></over><do><if><condition><greater><variable>Loop</variable><to-integer>1</to-integer></greater></condition><then>, </then></if>Argument<to-string><variable>Loop</variable></to-string>Type</do></foreach></then><else>void</else></if>) &gt; &gt; Callbacks;
		
		for(Node&lt; std::function&lt; ReturnType (<if><condition><greater><variable>NumberOfArguments</variable><to-integer>0</to-integer></greater></condition><then><foreach name="Loop"><over><range><to-integer>1</to-integer><variable>NumberOfArguments</variable></range></over><do><if><condition><greater><variable>Loop</variable><to-integer>1</to-integer></greater></condition><then>, </then></if>Argument<to-string><variable>Loop</variable></to-string>Type</do></foreach></then><else>void</else></if>) &gt; &gt; * CallbackNode = _Callbacks.GetHead(); CallbackNode != 0; CallbackNode = CallbackNode-&gt;GetNext())
		{
			Callbacks.push_back(CallbackNode-&gt;GetValue());
		}
		for(auto &amp; Callback : Callbacks)
		{
			Callback(<foreach name="Loop"><over><range><to-integer>1</to-integer><variable>NumberOfArguments</variable></range></over><do><if><condition><greater><variable>Loop</variable><to-integer>1</to-integer></greater></condition><then>, </then></if>Argument<to-string><variable>Loop</variable></to-string></do></foreach>);
		}
	}
private:
	List&lt; std::function&lt; ReturnType (<if><condition><greater><variable>NumberOfArguments</variable><to-integer>0</to-integer></greater></condition><then><foreach name="Loop"><over><range><to-integer>1</to-integer><variable>NumberOfArguments</variable></range></over><do><if><condition><greater><variable>Loop</variable><to-integer>1</to-integer></greater></condition><then>, </then></if>Argument<to-string><variable>Loop</variable></to-string>Type</do></foreach></then><else>void</else></if>) &gt; &gt; _Callbacks;
};
/////////  end    <variable>Template.UUID</variable>  ///////////////////////
</body>
</template>
