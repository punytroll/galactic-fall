<?xml version="1.0" encoding="utf-8"?>
<template>
	<header name="Method Callback" description="A function which returns a Callback object wrapped around an object-bound method pointer." author="Hagen MÃ¶bius">
		<uuid>89e43761-647f-4c24-88d4-76caa736d627</uuid>
		<label category="c++"/>
		<label category="function"/>
		<variable type="integer" name="NumberOfArguments" default-value="0" description="The number of typed arguments."/>
	</header>
	<body>/////////  begin  <variable>Template.UUID</variable>  ///////////////////////
// <variable>Template.Name</variable>
// NumberOfArguments=<to-string><variable>NumberOfArguments</variable></to-string>
///////////////////////////////////////////////////////////////////////////////
template &lt; typename ClassType, typename ReturnType<foreach name="Loop"><over><range><to-integer>1</to-integer><variable>NumberOfArguments</variable></range></over><do>, typename Argument<to-string><variable>Loop</variable></to-string>Type</do></foreach> &gt;
Callback<to-string><variable>NumberOfArguments</variable></to-string>&lt; ReturnType<foreach name="Loop"><over><range><to-integer>1</to-integer><variable>NumberOfArguments</variable></range></over><do>, Argument<to-string><variable>Loop</variable></to-string>Type</do></foreach> &gt; Callback(ClassType * Object, ReturnType (ClassType::*Method)(<foreach name="Loop"><over><range><to-integer>1</to-integer><variable>NumberOfArguments</variable></range></over><do><if><condition><greater><variable>Loop</variable><to-integer>1</to-integer></greater></condition><then>, </then></if>Argument<to-string><variable>Loop</variable></to-string>Type</do></foreach>))
{
	return Callback<to-string><variable>NumberOfArguments</variable></to-string>&lt; ReturnType<foreach name="Loop"><over><range><to-integer>1</to-integer><variable>NumberOfArguments</variable></range></over><do>, Argument<to-string><variable>Loop</variable></to-string>Type</do></foreach> &gt;(new MethodCore<to-string><variable>NumberOfArguments</variable></to-string>&lt; ClassType, ReturnType<foreach name="Loop"><over><range><to-integer>1</to-integer><variable>NumberOfArguments</variable></range></over><do>, Argument<to-string><variable>Loop</variable></to-string>Type</do></foreach> &gt;(Object, Method));
}
/////////  end    <variable>Template.UUID</variable>  ///////////////////////
</body>
</template>
