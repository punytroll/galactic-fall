<?xml version="1.0" encoding="utf-8"?>
<template>
	<header name="Callback Core" description="This template class provides the basic typing and calling machanism." author="Hagen MÃ¶bius">
		<uuid>5afb7876-076b-4ec6-9531-60f51d795b63</uuid>
		<label category="c++"/>
		<label category="class"/>
		<label category="template"/>
		<variable type="boolean" name="InstanceCount" default-value="false" description="Specify whether your generated code should include debug messages on creation and destruction."/>
		<variable type="integer" name="NumberOfArguments" default-value="0" description="The number of typed arguments."/>
	</header>
	<body>/////////  begin  <variable>Template.UUID</variable>  ///////////////////////
// <variable>Template.Name</variable>
// InstanceCount=<to-string><variable>InstanceCount</variable></to-string>
// NumberOfArguments=<to-string><variable>NumberOfArguments</variable></to-string>
///////////////////////////////////////////////////////////////////////////////
template &lt; typename ReturnType<foreach name="Loop"><over><range><to-integer>1</to-integer><variable>NumberOfArguments</variable></range></over><do>, typename Argument<to-string><variable>Loop</variable></to-string>Type</do></foreach> &gt;
class CallbackCore<to-string><variable>NumberOfArguments</variable></to-string> : public Counter
{
public:<if><condition><equal><variable>InstanceCount</variable><to-boolean>true</to-boolean></equal></condition><then>
	CallbackCore<to-string><variable>NumberOfArguments</variable></to-string>(void)
	{
		std::cout &lt;&lt; "+ CallbackCore<to-string><variable>NumberOfArguments</variable></to-string>" &lt;&lt; std::endl;
	}
	
</then></if>
	virtual ~CallbackCore<to-string><variable>NumberOfArguments</variable></to-string>(void)
	{<if><condition><equal><variable>InstanceCount</variable><to-boolean>true</to-boolean></equal></condition><then>
		std::cout &lt;&lt; "- CallbackCore<to-string><variable>NumberOfArguments</variable></to-string>" &lt;&lt; std::endl;
</then></if>
	}
	
	virtual ReturnType Call(<if><condition><greater><variable>NumberOfArguments</variable><to-integer>0</to-integer></greater></condition><then><foreach name="Loop"><over><range><to-integer>1</to-integer><variable>NumberOfArguments</variable></range></over><do><if><condition><greater><variable>Loop</variable><to-integer>1</to-integer></greater></condition><then>, </then></if>Argument<to-string><variable>Loop</variable></to-string>Type Argument<to-string><variable>Loop</variable></to-string></do></foreach></then><else>void</else></if>) const = 0;
	
	virtual bool IsValid(void) const = 0;
};
/////////  end    <variable>Template.UUID</variable>  ///////////////////////
</body>
</template>
