#! /usr/bin/python3

import argparse
import os

parser = argparse.ArgumentParser()
debugging_group = parser.add_mutually_exclusive_group()
debugging_group.add_argument("--enable-debugging", action="store_true", default=None, dest="debugging")
debugging_group.add_argument("--disable-debugging", action="store_false", default=None, dest="debugging")
optimization_group = parser.add_mutually_exclusive_group()
optimization_group.add_argument("--enable-optimization", action="store_true", default=None, dest="optimization")
optimization_group.add_argument("--disable-optimization", action="store_false", default=None, dest="optimization")
parser.add_argument("--python", action="store", default=None, dest="python")
arguments = parser.parse_args()

write_all = False

def get_value(line, name):
	prefix = name + " = "
	if line.startswith(prefix) == True:
		return line[len(prefix):]
	else:
		return None

def get_line_set(line, name):
	value = get_value(line, name)
	if value != None:
		return set(value.split())
	else:
		return None

def get_line_string(line, name):
	value = get_value(line, name)
	if value != None:
		return value.strip()
	else:
		return None

configuration_directory = ".configuration.d"
if os.path.isdir(configuration_directory) == False:
	if os.path.exists(configuration_directory) == True:
		os.remove(configuration_directory)
	os.makedirs(configuration_directory)
	write_all = True

if os.path.exists("configuration") == False or os.path.getctime("configure") > os.path.getctime("configuration"):
	write_all = True

# empty definitions of configuration variables
configuration_PYTHON = None
configuration_CXXFLAGS = None
configuration_LDFLAGS = None

# read the configuration from the files in the configuration directory
def process(line):
	global configuration_PYTHON, configuration_CXXFLAGS, configuration_LDFLAGS
	candidate = get_line_string(line, "PYTHON")
	if candidate != None:
		if configuration_PYTHON == None:
			configuration_PYTHON = candidate
		else:
			print("Multiple definitions of the configuration variable PYTHON will be ignored.")
	else:
		candidate = get_line_set(line, "CXXFLAGS")
		if candidate != None:
			if configuration_CXXFLAGS == None:
				configuration_CXXFLAGS = candidate
			else:
				print("Multiple definitions of the configuration variable CXXFLAGS will be ignored.")
		else:
			candidate = get_line_set(line, "LDFLAGS")
			if candidate != None:
				if configuration_LDFLAGS == None:
					configuration_LDFLAGS = candidate
				else:
					print("Multiple definitions of the configuration variable LDFLAGS will be ignored.")

for item_name in os.listdir(configuration_directory):
	item_path = os.path.join(configuration_directory, item_name)
	if os.path.isfile(item_path) == True:
		for line in open(item_path):
			process(line)

# setting or adding default values to configuration variables
# CXXFLAGS
if configuration_CXXFLAGS == None:
	configuration_CXXFLAGS = set()
CXXFLAGS = configuration_CXXFLAGS.copy()
CXXFLAGS.add("-Wall")
CXXFLAGS.add("-Werror")
CXXFLAGS.add("-std=c++14")
# LDFLAGS
if configuration_LDFLAGS == None:
	configuration_LDFLAGS = set()
LDFLAGS = configuration_LDFLAGS.copy()
# PYTHON
PYTHON = configuration_PYTHON
if PYTHON == None:
	PYTHON = "python3"

# applying new values from command line
# debugging
if arguments.debugging == True:
	CXXFLAGS.add("-g")
	LDFLAGS.add("-g")
elif arguments.debugging == False:
	CXXFLAGS.discard("-g")
	LDFLAGS.discard("-g")
# optimization
if arguments.optimization == True:
	CXXFLAGS.discard("-O0")
	CXXFLAGS.add("-O2")
elif arguments.optimization == False:
	CXXFLAGS.add("-O0")
	CXXFLAGS.discard("-O2")
# python
if arguments.python != None:
	PYTHON = arguments.python

# writing new values to configuration files
# CXXFLAGS
if len(CXXFLAGS.symmetric_difference(configuration_CXXFLAGS)) > 0 or write_all == True:
	print("Configuring CXXFLAGS=" + " ".join(CXXFLAGS))
	with open(os.path.join(configuration_directory, "CXXFLAGS"), "w") as file:
		file.write("# configuration generated by configure and read by Makefiles\n")
		file.write("CXXFLAGS_configuration = $(root)/.configuration.d/CXXFLAGS\n")
		file.write("CXXFLAGS = " + " ".join(CXXFLAGS) + "\n")
else:
	print("Configuration CXXFLAGS=" + " ".join(CXXFLAGS))

# LDFLAGS
if len(LDFLAGS.symmetric_difference(configuration_LDFLAGS)) > 0 or write_all == True:
	print("Configuring LDFLAGS=" + " ".join(LDFLAGS))
	with open(os.path.join(configuration_directory, "LDFLAGS"), "w") as file:
		file.write("# configuration generated by configure and read by Makefiles\n")
		file.write("LDFLAGS_configuration = $(root)/.configuration.d/LDFLAGS\n")
		file.write("LDFLAGS = " + " ".join(LDFLAGS) + "\n")
else:
	print("Configuration LDFLAGS=" + " ".join(LDFLAGS))

# PYTHON
if PYTHON != configuration_PYTHON or write_all == True:
	print("Configuring PYTHON=" + PYTHON)
	with open(os.path.join(configuration_directory, "PYTHON"), "w") as file:
		file.write("# configuration generated by configure and read by Makefiles\n")
		file.write("PYTHON_configuration = $(root)/.configuration.d/PYTHON\n")
		file.write("PYTHON = " + PYTHON + "\n")
else:
	print("Configuration PYTHON=" + PYTHON)

# "configuration"
with open("configuration", "w") as file:
	file.write("# configuration generated by configure and read by Makefiles\n\n")
	file.write("include ${root}/.configuration.d/CXXFLAGS\n\n")
	file.write("include ${root}/.configuration.d/LDFLAGS\n\n")
	file.write("include ${root}/.configuration.d/PYTHON\n")
