The job of the rasterizer is to calculate a bitmap image from a vectorial
description of the image. The description contains geometrical primitives with
colors and transparency.
The size of the output image is requested on the command line whereas the
vectorial description is given in a local coordinate system, that can be chosen
freely and independently with each vector description. The rasterizer
normalizes the coordinates and maps them into the size of the output image.
The rasterization process works in two phases:

1. The vectorial description is turned into a two-dimensional array of samples,
   the smallest entity of color and transparency.
2. The samples are aggregated into pixels of the output image.

The second step allows to produce anti-aliasing.

pixels_x:
	The number of pixels on the X-axis, of the output image.

pixels_y:
	The number of pixels on the Y-axis, of the output image.

sub_pixels:
	The number of samples of a single pixel on one axis.

samples_x:
	The number of samples on the X-axis.
	Calculated as:
		pixels_x * sub_pixels

samples_y:
	The number of samples on the Y-axis.
	Calculated as:
		pixels_y * sub_pixels

file format:
	width: 4 byte unsigned integer in network byte order (big endian)
	height: 4 byte unsigned integer in network byte order (big endian)
	format: 4 byte unsigned integer in network byte order (big endian)
		format = 1: RGBA
			red: 1 byte
			green: 1 byte
			blue: 1 byte
			alpha: 1 byte
		format = 2: RGB
			red: 1 byte
			green: 1 byte
			blue: 1 byte
	content: width * height in format

transparency:
	Although the rasterizer works with transparency internally the output will
	contain correct alpha values for opacity.
